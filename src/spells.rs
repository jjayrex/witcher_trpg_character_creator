use crate::locale::Locale;

pub enum NoviceSpells {
    // Mixed Element
    AfansMirror,
    BlindingDust,
    Dispel,
    Glamour,
    MagicCompass,
    MindManipulation,
    SummonStaff,
    Telepathy,
    AlchemicalRecovery,
    Blemish,
    DetectLeyLines,
    FergusDemise,
    HoldTongue,
    MagicScreen,
    ReopenPortal,
    SavollasMethod,
    // Earth
    CenllyGraig,
    CodiBywyd,
    DiagnosticSpell,
    EarthenSpike,
    KorathsBreath,
    LuthiensQuill,
    MagicHealing,
    TalffrynsPrison,
    Cryfhau,
    EarthenPillar,
    SharpenSenses,
    SoftenEarth,
    // Air
    Adenydd,
    AirPocket,
    BronwynsGust,
    FreshenAir,
    UriensShelter,
    StaticStorm,
    Telekinesis,
    Zephyr,
    BronwynsBow,
    DustCoating,
    LightFeet,
    MagnifyOdor,
    // Fire
    Aenye,
    AineVerseos,
    BrandOfFire,
    CadfansGrasp,
    MagicFlare,
    RaiseFlames,
    TanioIlchar,
    WaveOfFire,
    BreathOfFire,
    CoatingOfFire,
    HarmlessFire,
    VahilasSmoke,
    // Water
    CarysHail,
    ControlWater,
    CurseOfSedna,
    DormynsFog,
    Downpour,
    IceSlick,
    PuroDwr,
    Rhewi,
    AurorasBreath,
    SlipStream,
    WaterJet,
    WebOfIce,
}

pub enum JourneymanSpells {
    // Mixed Elements
    EilhartsTechnique,
    Illusion,
    Teleportation,
    Cloak,
    DisruptFocus,
    DormynsChamber,
    Empower,
    SpectralTether,
    TrapPortal,
    DeClaudinesSubstitution,
    PreecesProcedure,
    // Earth
    ElgansTheory,
    RhwystyrGraig,
    StammelfordsEarthquake,
    BekkersRockslide,
    ElgansBastion,
    JavedsSwarm,
    // Air
    AlzursThunder,
    GwyntTroelli,
    Suffocate,
    BallLightning,
    InvisibleRibbon,
    TouchOfLightning,
    AkhanDaal,
    VanAdelaidesGale,
    // Fire
    DemetiasCrestSurge,
    FlamingVortex,
    SeirffHaul,
    CinderDoor,
    MagesForge,
    SmithsTouch,
    // Water
    Anialwch,
    MerigoldsHailstorm,
    WavesOfTheNaglfar,
    EssenceOfPotion,
    Invaerne,
    Rusting,
}

pub enum MasterSpells {
    // Mixed Elements
    MentalCommand,
    StandingPortal,
    BekkersDarkMirror,
    StealSpell,
    // Earth
    Polymorphism,
    Transmutation,
    CrystalStasis,
    ShapeEarth,
    // Air
    Dervish,
    LightningStorm,
    Gwyntog,
    HandOfTheTempest,
    // Fire
    FireFromTheSky,
    MirrorEffect,
    BlazeOfTheKorath,
    LivingFire,
    // Water
    PartWater,
    TryferiGaeaf,
    AinfrasExtraction,
    DelugeOfYs,
}

pub enum Deity {
    CoramAghTera,
    EternalFire,
    Freya,
    Melitele,
    Kreve,
    GreatSun,
    Epona,
    Svalblod,
    Veyopatis,
    DanaMeadbh,
    Lebioda,
    Nehaleni,
    Morrigan,
    Lilvani,
}

pub enum ArchPriestInvocations {
    BlessingOfDeath,
    EternalJudgement,
    FreyasBravery,
    HealingRest,
    LuckOfFather,
    WhiteFlame,
    BlessedHerd,
    BloodOfBerserker,
    ChampionOfRiver,
    FeastOfPlenty,
    MiracleOfLebioda,
    OmenOfMisfortune,
    RetributionOfRaven,
    Silverlight,
}

pub enum PriestInvocations {
    // Novice
    BlessingOfFortune,
    BlessingOfLove,
    HolyLight,
    WatersOfClearance,
    WebOfLies,
    VaultsOfKnowledge,
    BlessedWeapon,
    DivineInspiration,
    DuplicitousDarkness,
    LightOfPenance,
    PresenceOfDivine,
    // Journeyman
    CleansingFire,
    HolyFortification,
    LightOfTruth,
    BlessingOfAbundance,
    BrandOfWithering,
    SeekTheSeekers,
    // Master
    DivinePortal,
    DivineWisdom,
    QuillOfDivine,
    SagittaAurea,
}

pub enum DruidCircle {
    Bleobheris,
    GwynCarn,
    CaedMyrkvid,
    CrowClan,
    Gedyneith,
}

pub enum HierophantInvocations {
    ShadeOfBleobheris,
    WindsOfTaiga,
    SanctuaryOfBlackGrove,
    ConspiracyOfMother,
    WellOfKnowledge,
}

pub enum DruidInvocations {
    // Novice
    BoilingBlood,
    CursedIllness,
    FriendToWildKind,
    NaturesGift,
    NaturesSight,
    SigilOfHidden,
    Herbalism,
    TouchOfBounty,
    VoiceOfCounselor,
    WebOfRoots,
    WordOfSummoning,
    // Journeyman
    BlessingOfHealing,
    PrimalReservoir,
    ThreadsOfLife,
    BigelowsBefoulment,
    BloodOfMountain,
    SigilOfHunt,
    // Master
    ShapeNature,
    SongOfSky,
    DruidicTotem,
    WrathOfNature,
}

pub enum Signs {
    // Basic
    Yrden,
    Quen,
    Aard,
    Igni,
    Axii,
    // Alternative
    MagicTrap,
    ActiveShield,
    AardSweep,
    FireStream,
    Puppet,
    // Advanced
    Somne,
    Supirre,
}

pub enum Rituals {
    // Novice
    CleansingRitual,
    Pyromancy,
    SpellJar,
    Hydromancy,
    RitualOfLife,
    SpiritSeance,
    MagicalMessage,
    RitualOfMagic,
    Telecommunication,
    CreateCrystalSkull,
    ImbueTrophy,
    Tyromancy,
    WagerersPendant,
    // Journeyman
    Consecrate,
    MagicBarrier,
    Oneiromancy,
    AnimateArmor,
    BeaconOfUnnatural,
    FogOfPast,
    MagicalGuestbook,
    // Master
    ArtifactCompression,
    GolemCrafting,
    InteractiveIllusion,
    CreatePlaceOfPower,
    EnchantAmulet,
}

pub fn read_novice_spells(
    ns: &NoviceSpells,
    l: &Locale,
) -> (Option<String>, Option<String>, u8, String, String, String) {
    match ns {
        // Mixed Element
        &NoviceSpells::AfansMirror => (
            l.msg("spell-novice-afans-mirror-name"),
            l.msg("spell-novice-afans-mirror-desc"),
            3,
            "10m".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::BlindingDust => (
            l.msg("spell-novice-blinding-dust-name"),
            l.msg("spell-novice-blinding-dust-desc"),
            3,
            "4m".to_string(),
            "1d10 Rounds".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::Dispel => (
            l.msg("spell-novice-dispel-name"),
            l.msg("spell-novice-dispel-desc"),
            0,
            "10m".to_string(),
            "Immediate".to_string(),
            "Spell Casting".to_string(),
        ),
        &NoviceSpells::Glamour => (
            l.msg("spell-novice-glamour-name"),
            l.msg("spell-novice-glamour-desc"),
            5,
            "Self".to_string(),
            "1d6 Hours".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::MagicCompass => (
            l.msg("spell-novice-magic-compass-name"),
            l.msg("spell-novice-magic-compass-desc"),
            3,
            "Self".to_string(),
            "1d6 Hours".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::MindManipulation => (
            l.msg("spell-novice-mind-manipulation-name"),
            l.msg("spell-novice-mind-manipulation-desc"),
            3,
            "5m".to_string(),
            "1d10 Rounds".to_string(),
            "Resist Magic".to_string(),
        ),
        &NoviceSpells::SummonStaff => (
            l.msg("spell-novice-summon-staff-name"),
            l.msg("spell-novice-summon-staff-desc"),
            2,
            "N/A".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::Telepathy => (
            l.msg("spell-novice-telepathy-name"),
            l.msg("spell-novice-telepathy-desc"),
            2,
            "10m".to_string(),
            "Active (1 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::AlchemicalRecovery => (
            l.msg("spell-novice-alchemical-recovery-name"),
            l.msg("spell-novice-alchemical-recovery-desc"),
            3,
            "2m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::Blemish => (
            l.msg("spell-novice-blemish-name"),
            l.msg("spell-novice-blemish-desc"),
            5,
            "4m".to_string(),
            "1d6 Hours".to_string(),
            "Resist Magic".to_string(),
        ),
        &NoviceSpells::DetectLeyLines => (
            l.msg("spell-novice-detect-ley-lines-name"),
            l.msg("spell-novice-detect-ley-lines-desc"),
            2,
            "1 Mile".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::FergusDemise => (
            l.msg("spell-novice-fergus-demise-name"),
            l.msg("spell-novice-fergus-demise-desc"),
            4,
            "2m".to_string(),
            "1 Hour".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::HoldTongue => (
            l.msg("spell-novice-hold-tongue-name"),
            l.msg("spell-novice-hold-tongue-desc"),
            5,
            "10m".to_string(),
            "10 Minutes".to_string(),
            "Resist Magic".to_string(),
        ),
        &NoviceSpells::MagicScreen => (
            l.msg("spell-novice-magic-screen-name"),
            l.msg("spell-novice-magic-screen-desc"),
            3,
            "4m".to_string(),
            "Immediate".to_string(),
            "Resist Magic".to_string(),
        ),
        &NoviceSpells::ReopenPortal => (
            l.msg("spell-novice-reopen-portal-name"),
            l.msg("spell-novice-reopen-portal-desc"),
            6,
            "2m".to_string(),
            "1 Round".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::SavollasMethod => (
            l.msg("spell-novice-savollas-method-name"),
            l.msg("spell-novice-savollas-method-desc"),
            5,
            "2m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        // Earth
        &NoviceSpells::CenllyGraig => (
            l.msg("spell-novice-cenlly-graig-name"),
            l.msg("spell-novice-cenlly-graig-desc"),
            3,
            "5m".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::CodiBywyd => (
            l.msg("spell-novice-codi-bywyd-name"),
            l.msg("spell-novice-codi-bywyd-desc"),
            2,
            "4m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::DiagnosticSpell => (
            l.msg("spell-novice-diagnostic-spell-name"),
            l.msg("spell-novice-diagnostic-spell-desc"),
            3,
            "5m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::EarthenSpike => (
            l.msg("spell-novice-earthen-spike-name"),
            l.msg("spell-novice-earthen-spike-desc"),
            5,
            "6m".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::KorathsBreath => (
            l.msg("spell-novice-koraths-breath-name"),
            l.msg("spell-novice-koraths-breath-desc"),
            2,
            "3m Cone".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::LuthiensQuill => (
            l.msg("spell-novice-luthiens-quill-name"),
            l.msg("spell-novice-luthiens-quill-desc"),
            2,
            "1m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::MagicHealing => (
            l.msg("spell-novice-magic-healing-name"),
            l.msg("spell-novice-magic-healing-desc"),
            5,
            "2m".to_string(),
            "1d10 Rounds".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::TalffrynsPrison => (
            l.msg("spell-novice-talffryns-prison-name"),
            l.msg("spell-novice-talffryns-prison-desc"),
            3,
            "10m".to_string(),
            "Until Destroyed".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &NoviceSpells::Cryfhau => (
            l.msg("spell-novice-cryfhau-name"),
            l.msg("spell-novice-cryfhau-desc"),
            4,
            "2m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::EarthenPillar => (
            l.msg("spell-novice-earthen-pillar-name"),
            l.msg("spell-novice-earthen-pillar-desc"),
            4,
            "10m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::SharpenSenses => (
            l.msg("spell-novice-sharpen-senses-name"),
            l.msg("spell-novice-sharpen-senses-desc"),
            2,
            "Self".to_string(),
            "30 Minutes".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::SoftenEarth => (
            l.msg("spell-novice-soften-earth-name"),
            l.msg("spell-novice-soften-earth-desc"),
            2,
            "10m".to_string(),
            "2d10 Rounds".to_string(),
            "None".to_string(),
        ),
        // Air
        &NoviceSpells::Adenydd => (
            l.msg("spell-novice-adenydd-name"),
            l.msg("spell-novice-adenydd-desc"),
            4,
            "Self".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::AirPocket => (
            l.msg("spell-novice-air-pocket-name"),
            l.msg("spell-novice-air-pocket-desc"),
            3,
            "12m".to_string(),
            "2d10 Rounds".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::BronwynsGust => (
            l.msg("spell-novice-bronwyns-gust-name"),
            l.msg("spell-novice-bronwyns-gust-desc"),
            2,
            "2m".to_string(),
            "Immediate".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &NoviceSpells::FreshenAir => (
            l.msg("spell-novice-freshen-air-name"),
            l.msg("spell-novice-freshen-air-desc"),
            2,
            "4m Radius".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::UriensShelter => (
            l.msg("spell-novice-uriens-shelter-name"),
            l.msg("spell-novice-uriens-shelter-desc"),
            3,
            "8m Radius".to_string(),
            "1d6 Hours".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::StaticStorm => (
            l.msg("spell-novice-static-storm-name"),
            l.msg("spell-novice-static-storm-desc"),
            5,
            "5m Radius".to_string(),
            "2d6 Rounds".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::Telekinesis => (
            l.msg("spell-novice-telekinesis-name"),
            l.msg("spell-novice-telekinesis-desc"),
            3,
            "5m".to_string(),
            "Active (2 STA)".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::Zephyr => (
            l.msg("spell-novice-zephyr-name"),
            l.msg("spell-novice-zephyr-desc"),
            5,
            "2m Radius".to_string(),
            "Immediate".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::BronwynsBow => (
            l.msg("spell-novice-bronwyns-bow-name"),
            l.msg("spell-novice-bronwyns-bow-desc"),
            5,
            "50m".to_string(),
            "Immediate".to_string(),
            "Dodge & Block".to_string(),
        ),
        &NoviceSpells::DustCoating => (
            l.msg("spell-novice-dust-coating-name"),
            l.msg("spell-novice-dust-coating-desc"),
            3,
            "20m".to_string(),
            "Active (2 STA)".to_string(),
            "Dodge".to_string(),
        ),
        &NoviceSpells::LightFeet => (
            l.msg("spell-novice-light-feet-name"),
            l.msg("spell-novice-light-feet-desc"),
            2,
            "Self".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::MagnifyOdor => (
            l.msg("spell-novice-magnify-odor-name"),
            l.msg("spell-novice-magnify-odor-desc"),
            5,
            "10m".to_string(),
            "1 Week".to_string(),
            "None".to_string(),
        ),
        // Fire
        &NoviceSpells::Aenye => (
            l.msg("spell-novice-aenye-name"),
            l.msg("spell-novice-aenye-desc"),
            5,
            "12m".to_string(),
            "Immediate".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &NoviceSpells::AineVerseos => (
            l.msg("spell-novice-aine-verseos-name"),
            l.msg("spell-novice-aine-verseos-desc"),
            1,
            "4m Radius".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::BrandOfFire => (
            l.msg("spell-novice-brand-of-fire-name"),
            l.msg("spell-novice-brand-of-fire-desc"),
            4,
            "8m".to_string(),
            "Immediate".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::CadfansGrasp => (
            l.msg("spell-novice-cadfans-grasp-name"),
            l.msg("spell-novice-cadfans-grasp-desc"),
            4,
            "8m".to_string(),
            "1d6 Rounds".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::MagicFlare => (
            l.msg("spell-novice-magic-flare-name"),
            l.msg("spell-novice-magic-flare-desc"),
            2,
            "8m Radius".to_string(),
            "Immediate".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &NoviceSpells::RaiseFlames => (
            l.msg("spell-novice-raise-flames-name"),
            l.msg("spell-novice-raise-flames-desc"),
            3,
            "10m".to_string(),
            "Active (2 STA)".to_string(),
            "Magical Shield".to_string(),
        ),
        &NoviceSpells::TanioIlchar => (
            l.msg("spell-novice-tanio-ilchar-name"),
            l.msg("spell-novice-tanio-ilchar-desc"),
            3,
            "8m".to_string(),
            "Immediate".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &NoviceSpells::WaveOfFire => (
            l.msg("spell-novice-wave-of-fire-name"),
            l.msg("spell-novice-wave-of-fire-desc"),
            4,
            "3m Cone".to_string(),
            "Immediate".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &NoviceSpells::BreathOfFire => (
            l.msg("spell-novice-breath-of-fire-name"),
            l.msg("spell-novice-breath-of-fire-desc"),
            4,
            "4m".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::CoatingOfFire => (
            l.msg("spell-novice-coating-of-fire-name"),
            l.msg("spell-novice-coating-of-fire-desc"),
            3,
            "2m".to_string(),
            "1 Hour".to_string(),
            "Dodge".to_string(),
        ),
        &NoviceSpells::HarmlessFire => (
            l.msg("spell-novice-harmless-fire-name"),
            l.msg("spell-novice-harmless-fire-desc"),
            3,
            "8m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::VahilasSmoke => (
            l.msg("spell-novice-vahilas-smoke-name"),
            l.msg("spell-novice-vahilas-smoke-desc"),
            3,
            "10m".to_string(),
            "Active (2 STA)".to_string(),
            "Dodge".to_string(),
        ),
        // Water
        &NoviceSpells::CarysHail => (
            l.msg("spell-novice-carys-hail-name"),
            l.msg("spell-novice-carys-hail-desc"),
            3,
            "5m".to_string(),
            "Immediate".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &NoviceSpells::ControlWater => (
            l.msg("spell-novice-control-water-name"),
            l.msg("spell-novice-control-water-desc"),
            5,
            "10m".to_string(),
            "Active (2 STA)".to_string(),
            "DC set by the GM".to_string(),
        ),
        &NoviceSpells::CurseOfSedna => (
            l.msg("spell-novice-curse-of-sedna-name"),
            l.msg("spell-novice-curse-of-sedna-desc"),
            5,
            "12m".to_string(),
            "Active (2 STA)".to_string(),
            "Athletics".to_string(),
        ),
        &NoviceSpells::DormynsFog => (
            l.msg("spell-novice-dormyns-fog-name"),
            l.msg("spell-novice-dormyns-fog-desc"),
            3,
            "10m Radius".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::Downpour => (
            l.msg("spell-novice-downpour-name"),
            l.msg("spell-novice-downpour-desc"),
            2,
            "8m".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::IceSlick => (
            l.msg("spell-novice-ice-slick-name"),
            l.msg("spell-novice-ice-slick-desc"),
            2,
            "10m".to_string(),
            "2d10 Rounds".to_string(),
            "Athletics".to_string(),
        ),
        &NoviceSpells::PuroDwr => (
            l.msg("spell-novice-puro-dwr-name"),
            l.msg("spell-novice-puro-dwr-desc"),
            2,
            "4m".to_string(),
            "1d10 Rounds".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::Rhewi => (
            l.msg("spell-novice-rhewi-name"),
            l.msg("spell-novice-rhewi-desc"),
            2,
            "8m".to_string(),
            "1d10 Rounds".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &NoviceSpells::AurorasBreath => (
            l.msg("spell-novice-auroras-breath-name"),
            l.msg("spell-novice-auroras-breath-desc"),
            5,
            "Self".to_string(),
            "30 Minutes".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::SlipStream => (
            l.msg("spell-novice-slip-stream-name"),
            l.msg("spell-novice-slip-stream-desc"),
            5,
            "Self".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        &NoviceSpells::WaterJet => (
            l.msg("spell-novice-water-jet-name"),
            l.msg("spell-novice-water-jet-desc"),
            5,
            "8m".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &NoviceSpells::WebOfIce => (
            l.msg("spell-novice-web-of-ice-name"),
            l.msg("spell-novice-web-of-ice-desc"),
            2,
            "2m".to_string(),
            "1 Day".to_string(),
            "None".to_string(),
        ),
        _ => (
            Some("?".to_string()),
            Some("?".to_string()),
            0,
            "?".to_string(),
            "?".to_string(),
            "?".to_string(),
        ),
    }
}

pub fn read_journeyman_spells(
    js: &JourneymanSpells,
    l: &Locale,
) -> (Option<String>, Option<String>, u8, String, String, String) {
    match js {
        // Mixed Element
        &JourneymanSpells::EilhartsTechnique => (
            l.msg("spell-journeyman-eilharts-technique-name"),
            l.msg("spell-journeyman-eilharts-technique-desc"),
            12,
            "3m".to_string(),
            "Immediate".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &JourneymanSpells::Illusion => (
            l.msg("spell-journeyman-illusion-name"),
            l.msg("spell-journeyman-illusion-desc"),
            8,
            "20m".to_string(),
            "Active (4 STA)".to_string(),
            "Resist Magic".to_string(),
        ),
        &JourneymanSpells::Teleportation => (
            l.msg("spell-journeyman-teleportation-name"),
            l.msg("spell-journeyman-teleportation-desc"),
            10,
            "N/A".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::Cloak => (
            l.msg("spell-journeyman-cloak-name"),
            l.msg("spell-journeyman-cloak-desc"),
            16,
            "Self".to_string(),
            "Active (2 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::DisruptFocus => (
            l.msg("spell-journeyman-disrupt-focus-name"),
            l.msg("spell-journeyman-disrupt-focus-desc"),
            15,
            "10m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::DormynsChamber => (
            l.msg("spell-journeyman-dormyns-chamber-name"),
            l.msg("spell-journeyman-dormyns-chamber-desc"),
            18,
            "10m".to_string(),
            "Active (8 STA)".to_string(),
            "Dodge".to_string(),
        ),
        &JourneymanSpells::Empower => (
            l.msg("spell-journeyman-empower-name"),
            l.msg("spell-journeyman-empower-desc"),
            12,
            "Self".to_string(),
            "1 Minute".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::SpectralTether => (
            l.msg("spell-journeyman-spectral-tether-name"),
            l.msg("spell-journeyman-spectral-tether-desc"),
            8,
            "10m".to_string(),
            "Active (4 STA)".to_string(),
            "Resist Magic".to_string(),
        ),
        &JourneymanSpells::TrapPortal => (
            l.msg("spell-journeyman-trap-portal-name"),
            l.msg("spell-journeyman-trap-portal-desc"),
            12,
            "4m".to_string(),
            "1 Month".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::DeClaudinesSubstitution => (
            l.msg("spell-journeyman-de-claudines-substitution-name"),
            l.msg("spell-journeyman-de-claudines-substitution-desc"),
            8,
            "2m".to_string(),
            "Permanent".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::PreecesProcedure => (
            l.msg("spell-journeyman-preeces-procedure-name"),
            l.msg("spell-journeyman-preeces-procedure-desc"),
            10,
            "3m".to_string(),
            "8 Hours".to_string(),
            "Resist Magic".to_string(),
        ),
        // Earth
        &JourneymanSpells::ElgansTheory => (
            l.msg("spell-journeyman-elgans-theory-name"),
            l.msg("spell-journeyman-elgans-theory-desc"),
            10,
            "8m".to_string(),
            "2d10 Rounds".to_string(),
            "Magical Shield".to_string(),
        ),
        &JourneymanSpells::RhwystyrGraig => (
            l.msg("spell-journeyman-rhwystyr-graig-name"),
            l.msg("spell-journeyman-rhwystyr-graig-desc"),
            15,
            "20m".to_string(),
            "Until Destroyed".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::StammelfordsEarthquake => (
            l.msg("spell-journeyman-stammelfords-earthquake-name"),
            l.msg("spell-journeyman-stammelfords-earthquake-desc"),
            12,
            "30m".to_string(),
            "1d10 Rounds".to_string(),
            "Athletics".to_string(),
        ),
        &JourneymanSpells::BekkersRockslide => (
            l.msg("spell-journeyman-bekkers-rockslide-name"),
            l.msg("spell-journeyman-bekkers-rockslide-desc"),
            13,
            "10m".to_string(),
            "Immediate".to_string(),
            "Dodge (Reposition)".to_string(),
        ),
        &JourneymanSpells::ElgansBastion => (
            l.msg("spell-journeyman-elgans-bastion-name"),
            l.msg("spell-journeyman-elgans-bastion-desc"),
            14,
            "Self".to_string(),
            "Active (4 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::JavedsSwarm => (
            l.msg("spell-journeyman-javeds-swarm-name"),
            l.msg("spell-journeyman-javeds-swarm-desc"),
            10,
            "6m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        // Air
        &JourneymanSpells::AlzursThunder => (
            l.msg("spell-journeyman-alzurs-thunder-name"),
            l.msg("spell-journeyman-alzurs-thunder-desc"),
            15,
            "25m".to_string(),
            "Immediate".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &JourneymanSpells::GwyntTroelli => (
            l.msg("spell-journeyman-gwynt-troelli-name"),
            l.msg("spell-journeyman-gwynt-troelli-desc"),
            12,
            "10m Radius".to_string(),
            "Active (4 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::Suffocate => (
            l.msg("spell-journeyman-suffocate-name"),
            l.msg("spell-journeyman-suffocate-desc"),
            14,
            "10m".to_string(),
            "Active (4 STA)".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &JourneymanSpells::BallLightning => (
            l.msg("spell-journeyman-ball-lightning-name"),
            l.msg("spell-journeyman-ball-lightning-desc"),
            14,
            "20m".to_string(),
            "5 Rounds".to_string(),
            "Dodge".to_string(),
        ),
        &JourneymanSpells::InvisibleRibbon => (
            l.msg("spell-journeyman-invisible-ribbon-name"),
            l.msg("spell-journeyman-invisible-ribbon-desc"),
            15,
            "10m".to_string(),
            "Immediate".to_string(),
            "Dodge or Block".to_string(),
        ),
        &JourneymanSpells::TouchOfLightning => (
            l.msg("spell-journeyman-touch-of-lightning-name"),
            l.msg("spell-journeyman-touch-of-lightning-desc"),
            8,
            "2m".to_string(),
            "Active (5 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::AkhanDaal => (
            l.msg("spell-journeyman-akhan-daal-name"),
            l.msg("spell-journeyman-akhan-daal-desc"),
            12,
            "4m (2m Radius)".to_string(),
            "Immediate".to_string(),
            "Dodge".to_string(),
        ),
        &JourneymanSpells::VanAdelaidesGale => (
            l.msg("spell-journeyman-van-adelaides-gale-name"),
            l.msg("spell-journeyman-van-adelaides-gale-desc"),
            12,
            "Self".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        // Fire
        &JourneymanSpells::DemetiasCrestSurge => (
            l.msg("spell-journeyman-demetias-crest-surge-name"),
            l.msg("spell-journeyman-demetias-crest-surge-desc"),
            12,
            "10m".to_string(),
            "Active (4 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::FlamingVortex => (
            l.msg("spell-journeyman-flaming-vortex-name"),
            l.msg("spell-journeyman-flaming-vortex-desc"),
            15,
            "10m Radius".to_string(),
            "Active (4 STA)".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &JourneymanSpells::SeirffHaul => (
            l.msg("spell-journeyman-seirff-haul-name"),
            l.msg("spell-journeyman-seirff-haul-desc"),
            10,
            "10m".to_string(),
            "2d10 Rounds".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &JourneymanSpells::CinderDoor => (
            l.msg("spell-journeyman-cinder-door-name"),
            l.msg("spell-journeyman-cinder-door-desc"),
            12,
            "2m".to_string(),
            "Active (3 STA)".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::MagesForge => (
            l.msg("spell-journeyman-mages-forge-name"),
            l.msg("spell-journeyman-mages-forge-desc"),
            12,
            "2m".to_string(),
            "1 Day".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::SmithsTouch => (
            l.msg("spell-journeyman-smiths-touch-name"),
            l.msg("spell-journeyman-smiths-touch-desc"),
            10,
            "2m".to_string(),
            "Active (10 STA)".to_string(),
            "Dodge".to_string(),
        ),
        // Water
        &JourneymanSpells::Anialwch => (
            l.msg("spell-journeyman-anialwch-name"),
            l.msg("spell-journeyman-anialwch-desc"),
            8,
            "10m".to_string(),
            "Immediate".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &JourneymanSpells::MerigoldsHailstorm => (
            l.msg("spell-journeyman-merigolds-hailstorm-name"),
            l.msg("spell-journeyman-merigolds-hailstorm-desc"),
            15,
            "30m Radius".to_string(),
            "Active (4 STA)".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &JourneymanSpells::WavesOfTheNaglfar => (
            l.msg("spell-journeyman-waves-of-the-naglfar-name"),
            l.msg("spell-journeyman-waves-of-the-naglfar-desc"),
            10,
            "3m Radius".to_string(),
            "Immediate".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &JourneymanSpells::EssenceOfPotion => (
            l.msg("spell-journeyman-essence-of-potion-name"),
            l.msg("spell-journeyman-essence-of-potion-desc"),
            12,
            "2m".to_string(),
            "Permanent".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::Invaerne => (
            l.msg("spell-journeyman-invaerne-name"),
            l.msg("spell-journeyman-invaerne-desc"),
            14,
            "50m".to_string(),
            "1 Hour".to_string(),
            "None".to_string(),
        ),
        &JourneymanSpells::Rusting => (
            l.msg("spell-journeyman-rusting-name"),
            l.msg("spell-journeyman-rusting-desc"),
            14,
            "4m".to_string(),
            "Permanent".to_string(),
            "Dodge or Block".to_string(),
        ),
        _ => (
            Some("?".to_string()),
            Some("?".to_string()),
            0,
            "?".to_string(),
            "?".to_string(),
            "?".to_string(),
        ),
    }
}

pub fn read_master_spells(
    ms: &MasterSpells,
    l: &Locale,
) -> (Option<String>, Option<String>, u8, String, String, String) {
    match ms {
        // Mixed Element
        &MasterSpells::MentalCommand => (
            l.msg("spell-master-mental-command-name"),
            l.msg("spell-master-mental-command-desc"),
            25,
            "10m".to_string(),
            "Until Task is Done".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &MasterSpells::StandingPortal => (
            l.msg("spell-master-standing-portal-name"),
            l.msg("spell-master-standing-portal-desc"),
            22,
            "N/A".to_string(),
            "Active (6 STA)".to_string(),
            "None".to_string(),
        ),
        &MasterSpells::BekkersDarkMirror => (
            l.msg("spell-master-bekkers-dark-mirror-name"),
            l.msg("spell-master-bekkers-dark-mirror-desc"),
            25,
            "10m".to_string(),
            "1 Month".to_string(),
            "Resist Magic".to_string(),
        ),
        &MasterSpells::StealSpell => (
            l.msg("spell-master-steal-spell-name"),
            l.msg("spell-master-steal-spell-desc"),
            20,
            "10m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        // Earth
        &MasterSpells::Polymorphism => (
            l.msg("spell-master-polymorphism-name"),
            l.msg("spell-master-polymorphism-desc"),
            22,
            "Self".to_string(),
            "Until Re-Cast".to_string(),
            "None".to_string(),
        ),
        &MasterSpells::Transmutation => (
            l.msg("spell-master-transmutation-name"),
            l.msg("spell-master-transmutation-desc"),
            25,
            "2m".to_string(),
            "Permanent".to_string(),
            "Magical Shield".to_string(),
        ),
        &MasterSpells::CrystalStasis => (
            l.msg("spell-master-crystal-stasis-name"),
            l.msg("spell-master-crystal-stasis-desc"),
            25,
            "6m".to_string(),
            "Active (6 STA)".to_string(),
            "Resist Magic or Dodge".to_string(),
        ),
        &MasterSpells::ShapeEarth => (
            l.msg("spell-master-shape-earth-name"),
            l.msg("spell-master-shape-earth-desc"),
            25,
            "6m".to_string(),
            "Permanent".to_string(),
            "None".to_string(),
        ),
        // Air
        &MasterSpells::Dervish => (
            l.msg("spell-master-dervish-name"),
            l.msg("spell-master-dervish-desc"),
            22,
            "2m Radius".to_string(),
            "Active (6 STA)".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &MasterSpells::LightningStorm => (
            l.msg("spell-master-lightning-storm-name"),
            l.msg("spell-master-lightning-storm-desc"),
            25,
            "N/A".to_string(),
            "Active (6 STA)".to_string(),
            "Dodge or Magical Shield".to_string(),
        ),
        &MasterSpells::Gwyntog => (
            l.msg("spell-master-gwyntog-name"),
            l.msg("spell-master-gwyntog-desc"),
            24,
            "100m".to_string(),
            "Active (6 STA)".to_string(),
            "None".to_string(),
        ),
        &MasterSpells::HandOfTheTempest => (
            l.msg("spell-master-hand-of-the-tempest-name"),
            l.msg("spell-master-hand-of-the-tempest-desc"),
            25,
            "20m".to_string(),
            "Immediate".to_string(),
            "Dodge".to_string(),
        ),
        // Fire
        &MasterSpells::FireFromTheSky => (
            l.msg("spell-master-fire-from-the-sky-name"),
            l.msg("spell-master-fire-from-the-sky-desc"),
            25,
            "40m Radius".to_string(),
            "2d6 Rounds".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &MasterSpells::MirrorEffect => (
            l.msg("spell-master-mirror-effect-name"),
            l.msg("spell-master-mirror-effect-desc"),
            25,
            "20m".to_string(),
            "2d6 Rounds".to_string(),
            "Dodge, Block, or Magical Shield".to_string(),
        ),
        &MasterSpells::BlazeOfTheKorath => (
            l.msg("spell-master-blaze-of-the-korath-name"),
            l.msg("spell-master-blaze-of-the-korath-desc"),
            24,
            "100m".to_string(),
            "Active (4 STA)".to_string(),
            "None".to_string(),
        ),
        &MasterSpells::LivingFire => (
            l.msg("spell-master-living-fire-name"),
            l.msg("spell-master-living-fire-desc"),
            25,
            "10m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        // Water
        &MasterSpells::PartWater => (
            l.msg("spell-master-part-water-name"),
            l.msg("spell-master-part-water-desc"),
            25,
            "10m Radius".to_string(),
            "Active (6 STA)".to_string(),
            "None".to_string(),
        ),
        &MasterSpells::TryferiGaeaf => (
            l.msg("spell-master-tryferi-gaeaf-name"),
            l.msg("spell-master-tryferi-gaeaf-desc"),
            22,
            "20m".to_string(),
            "1d10 Rounds".to_string(),
            "Block or Magical Shield".to_string(),
        ),
        &MasterSpells::AinfrasExtraction => (
            l.msg("spell-master-ainfras-extraction-name"),
            l.msg("spell-master-ainfras-extraction-desc"),
            22,
            "8m".to_string(),
            "Immediate".to_string(),
            "Resist Magic".to_string(),
        ),
        &MasterSpells::DelugeOfYs => (
            l.msg("spell-master-deluge-of-ys-name"),
            l.msg("spell-master-deluge-of-ys-desc"),
            24,
            "40m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        _ => (
            Some("?".to_string()),
            Some("?".to_string()),
            0,
            "?".to_string(),
            "?".to_string(),
            "?".to_string(),
        ),
    }
}

pub fn read_priest_invocations(
    pi: &PriestInvocations,
    l: &Locale,
) -> (Option<String>, Option<String>, u8, String, String, String) {
    match pi {
        // Novice
        &PriestInvocations::BlessingOfFortune => (
            l.msg("invocation-priest-blessing-of-fortune-name"),
            l.msg("invocation-priest-blessing-of-fortune-desc"),
            1,
            "10m".to_string(),
            "Until Expended".to_string(),
            "DC:12".to_string(),
        ),
        &PriestInvocations::BlessingOfLove => (
            l.msg("invocation-priest-blessing-of-love-name"),
            l.msg("invocation-priest-blessing-of-love-desc"),
            2,
            "5m".to_string(),
            "1d10 Rounds".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::HolyLight => (
            l.msg("invocation-priest-holy-light-name"),
            l.msg("invocation-priest-holy-light-desc"),
            1,
            "Self".to_string(),
            "3d10 Rounds".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::WatersOfClearance => (
            l.msg("invocation-priest-waters-of-clearance-name"),
            l.msg("invocation-priest-waters-of-clearance-desc"),
            1,
            "5m".to_string(),
            "Immediate".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &PriestInvocations::WebOfLies => (
            l.msg("invocation-priest-web-of-lies-name"),
            l.msg("invocation-priest-web-of-lies-desc"),
            3,
            "8m".to_string(),
            "INT roll ends".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &PriestInvocations::VaultsOfKnowledge => (
            l.msg("invocation-priest-vaults-of-knowledge-name"),
            l.msg("invocation-priest-vaults-of-knowledge-desc"),
            3,
            "Self".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::BlessedWeapon => (
            l.msg("invocation-priest-blessed-weapon-name"),
            l.msg("invocation-priest-blessed-weapon-desc"),
            2,
            "2m".to_string(),
            "30 Minutes".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::DivineInspiration => (
            l.msg("invocation-priest-divine-inspiration-name"),
            l.msg("invocation-priest-divine-inspiration-desc"),
            2,
            "8m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::DuplicitousDarkness => (
            l.msg("invocation-priest-duplicitous-darkness-name"),
            l.msg("invocation-priest-duplicitous-darkness-desc"),
            2,
            "2m".to_string(),
            "1 Hour".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::LightOfPenance => (
            l.msg("invocation-priest-light-of-penance-name"),
            l.msg("invocation-priest-light-of-penance-desc"),
            3,
            "6m".to_string(),
            "Immediate".to_string(),
            "Resist Magic".to_string(),
        ),
        &PriestInvocations::PresenceOfDivine => (
            l.msg("invocation-priest-presence-of-divine-name"),
            l.msg("invocation-priest-presence-of-divine-desc"),
            3,
            "10m".to_string(),
            "10 Minutes".to_string(),
            "None".to_string(),
        ),
        // Journeyman
        &PriestInvocations::CleansingFire => (
            l.msg("invocation-priest-cleansing-fire-name"),
            l.msg("invocation-priest-cleansing-fire-desc"),
            6,
            "10m".to_string(),
            "Until Put Out".to_string(),
            "Resist Magic or Magical Shield".to_string(),
        ),
        &PriestInvocations::HolyFortification => (
            l.msg("invocation-priest-holy-fortification-name"),
            l.msg("invocation-priest-holy-fortification-desc"),
            5,
            "10m".to_string(),
            "Immediate".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::LightOfTruth => (
            l.msg("invocation-priest-light-of-truth-name"),
            l.msg("invocation-priest-light-of-truth-desc"),
            4,
            "5m".to_string(),
            "Active (2 STA)".to_string(),
            "Resist Magic".to_string(),
        ),
        &PriestInvocations::BlessingOfAbundance => (
            l.msg("invocation-priest-blessing-of-abundance-name"),
            l.msg("invocation-priest-blessing-of-abundance-desc"),
            6,
            "Self".to_string(),
            "1 Day".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::BrandOfWithering => (
            l.msg("invocation-priest-brand-of-withering-name"),
            l.msg("invocation-priest-brand-of-withering-desc"),
            6,
            "8m".to_string(),
            "1 Week".to_string(),
            "Resist Magic".to_string(),
        ),
        &PriestInvocations::SeekTheSeekers => (
            l.msg("invocation-priest-seek-the-seekers-name"),
            l.msg("invocation-priest-seek-the-seekers-desc"),
            6,
            "Self".to_string(),
            "1 Day".to_string(),
            "None".to_string(),
        ),
        // Master
        &PriestInvocations::DivinePortal => (
            l.msg("invocation-priest-divine-portal-name"),
            l.msg("invocation-priest-divine-portal-desc"),
            12,
            "N/A".to_string(),
            "1 Round".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::DivineWisdom => (
            l.msg("invocation-priest-divine-wisdom-name"),
            l.msg("invocation-priest-divine-wisdom-desc"),
            10,
            "50m".to_string(),
            "Active (5 STA)".to_string(),
            "None".to_string(),
        ),
        &PriestInvocations::QuillOfDivine => (
            l.msg("invocation-priest-quill-of-divine-name"),
            l.msg("invocation-priest-quill-of-divine-desc"),
            0,
            "2m".to_string(),
            "Permanent".to_string(),
            "Resist Magic".to_string(),
        ),
        &PriestInvocations::SagittaAurea => (
            l.msg("invocation-priest-sagitta-aurea-name"),
            l.msg("invocation-priest-sagitta-aurea-desc"),
            14,
            "20m".to_string(),
            "Immediate".to_string(),
            "Dodge".to_string(),
        ),
        _ => (
            Some("?".to_string()),
            Some("?".to_string()),
            0,
            "?".to_string(),
            "?".to_string(),
            "?".to_string(),
        ),
    }
}
